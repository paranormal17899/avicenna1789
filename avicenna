import streamlit as st
import openai
import numpy as np
from typing import List

# OpenAI API key
openai.api_key = "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"

# Initialize session state
if "messages" not in st.session_state:
    st.session_state["messages"] = []
if "user_text" not in st.session_state:
    st.session_state["user_text"] = ""

# Function to clear chat
def clear_chat() -> None:
    st.session_state["messages"] = []
    st.session_state["user_text"] = ""
    global user_input
    user_input = ""

# Function to create a GPT-3 completion
def create_gpt_completion(ai_model: str, messages: List[dict]) -> dict:
    completion = openai.ChatCompletion.create(
        model=ai_model,
        messages=messages,
    )
    return completion

# Function to show chat conversation
def show_chat(ai_content: str, user_text: str) -> None:
    st.markdown(f"**User**: {user_text}")
    st.markdown(f"**AI**: {ai_content}")

# Function to process a chat conversation
def show_gpt_conversation() -> None:
    try:
        completion = create_gpt_completion("text-davinci-002", st.session_state["messages"])
        ai_content = completion.choices[0].message.content
        st.session_state["messages"].append({"role": "system", "content": "ты чат бот помощник"})
        if ai_content:
            show_chat(ai_content, st.session_state["user_text"])
            st.session_state["user_text"] = ""
    except openai.error.InvalidRequestError as err:
        if "context_length_exceeded" in err.message:  # Исправленная строка
            st.session_state["messages"].pop(1)
            if len(st.session_state["messages"]) == 1:
                st.session_state["user_text"] = ""
            show_gpt_conversation()
        else:
            st.error(err)
    except (openai.error.OpenAIError, UnboundLocalError) as err:
        st.error(err)
